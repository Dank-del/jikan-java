/*
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API. It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.  # Information  ‚ö° Jikan is powered by it's awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)  ## Rate Limiting  | Duration | Requests | |----|----| | Monthly | **Unlimited** | | Per Minute | 60 requests | | Per Second | 3 requests |   ## JSON Notes - Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`. - Any array or object property whose value does not exist or is undetermined, will be empty. - Any `score` property whose value does not exist or is undetermined, will be `0`. - All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone  ## Caching By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.  All requests, by default are cached for **24 hours** except the following endpoints which have their own unique cache **Time To Live**.   | Request | TTL | | ---- | ---- | | All (Default) | 24 hours |   The following response headers will detail cache information.  | Header | Remarks | | ---- | ---- | | `Expires` | Cache expiry date | | `Last-Modified` | Cache set date | | `X-Request-Fingerprint` | Unique request fingerprint |   Note: Caching headers will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.  They won't be available on pages which perform queries, like /anime, or /top/anime, etc.  ## Allowed HTTP(s) requests  **Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list. Only GET requests are supported which return READ-ONLY data.  ## HTTP Responses  | HTTP Status | Remarks | | ---- | ---- | | `200 - OK` | The request was successful | | `304 - Not Modified` | You have the latest data (Cache Validation response) | | `400 - Bad Request` | You've made an invalid request. Recheck documentation | | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` | | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed | | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) | | `500 - Internal Server Error` | Something is not working on our end. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue | | `503 - Service Unavailable` | The service has broke. |   ## JSON Error Response  ```json  {      \"status\": 404,      \"type\": \"BadResponseException\",      \"message\": \"Resource does not exist\",      \"error\": \"Something Happened\",      \"report_url\": \"https://github.com...\"   } ```  | Property | Remarks | | ---- | ---- | | `status` | Returned HTTP Status Code | | `type` | Thrown Exception | | `message` | Human-readable error message | | `error` | Error response and trace from the API | | `report_url` | Clicking this would redirect you to a generated GitHub issue. ‚Ñπ It's only returned on a parser error. |   ## Cache Validation  - All requests return a `ETag` header which is an MD5 hash of the response - You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header - You will get a HTTP `304 - Not Modified` response if the content has not changed - If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response  ![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')  ## Disclaimer  - Jikan is not affiliated with MyAnimeList.net. - Jikan is a free, open-source API. Please use it responsibly.  ----  By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.  [v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.AnimeReviewScores;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnimeReview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-08T15:18:52.497326700+05:30[Asia/Calcutta]")
public class AnimeReview {
  public static final String SERIALIZED_NAME_MAL_ID = "mal_id";
  @SerializedName(SERIALIZED_NAME_MAL_ID)
  private Integer malId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VOTES = "votes";
  @SerializedName(SERIALIZED_NAME_VOTES)
  private Integer votes;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_REVIEW = "review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  private String review;

  public static final String SERIALIZED_NAME_EPISODES_WATCHED = "episodes_watched";
  @SerializedName(SERIALIZED_NAME_EPISODES_WATCHED)
  private Integer episodesWatched;

  public static final String SERIALIZED_NAME_SCORES = "scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private AnimeReviewScores scores;

  public AnimeReview() {
  }

  public AnimeReview malId(Integer malId) {
    
    this.malId = malId;
    return this;
  }

   /**
   * MyAnimeList ID
   * @return malId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList ID")

  public Integer getMalId() {
    return malId;
  }


  public void setMalId(Integer malId) {
    this.malId = malId;
  }


  public AnimeReview url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * MyAnimeList URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public AnimeReview type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Entry Type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Entry Type")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public AnimeReview votes(Integer votes) {
    
    this.votes = votes;
    return this;
  }

   /**
   * Number of user votes on the Review
   * @return votes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of user votes on the Review")

  public Integer getVotes() {
    return votes;
  }


  public void setVotes(Integer votes) {
    this.votes = votes;
  }


  public AnimeReview date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * Review created date ISO8601
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Review created date ISO8601")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public AnimeReview review(String review) {
    
    this.review = review;
    return this;
  }

   /**
   * Review content
   * @return review
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Review content")

  public String getReview() {
    return review;
  }


  public void setReview(String review) {
    this.review = review;
  }


  public AnimeReview episodesWatched(Integer episodesWatched) {
    
    this.episodesWatched = episodesWatched;
    return this;
  }

   /**
   * Number of episodes watched
   * @return episodesWatched
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of episodes watched")

  public Integer getEpisodesWatched() {
    return episodesWatched;
  }


  public void setEpisodesWatched(Integer episodesWatched) {
    this.episodesWatched = episodesWatched;
  }


  public AnimeReview scores(AnimeReviewScores scores) {
    
    this.scores = scores;
    return this;
  }

   /**
   * Get scores
   * @return scores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnimeReviewScores getScores() {
    return scores;
  }


  public void setScores(AnimeReviewScores scores) {
    this.scores = scores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnimeReview animeReview = (AnimeReview) o;
    return Objects.equals(this.malId, animeReview.malId) &&
        Objects.equals(this.url, animeReview.url) &&
        Objects.equals(this.type, animeReview.type) &&
        Objects.equals(this.votes, animeReview.votes) &&
        Objects.equals(this.date, animeReview.date) &&
        Objects.equals(this.review, animeReview.review) &&
        Objects.equals(this.episodesWatched, animeReview.episodesWatched) &&
        Objects.equals(this.scores, animeReview.scores);
  }

  @Override
  public int hashCode() {
    return Objects.hash(malId, url, type, votes, date, review, episodesWatched, scores);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnimeReview {\n");
    sb.append("    malId: ").append(toIndentedString(malId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    votes: ").append(toIndentedString(votes)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("    episodesWatched: ").append(toIndentedString(episodesWatched)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mal_id");
    openapiFields.add("url");
    openapiFields.add("type");
    openapiFields.add("votes");
    openapiFields.add("date");
    openapiFields.add("review");
    openapiFields.add("episodes_watched");
    openapiFields.add("scores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AnimeReview
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AnimeReview.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnimeReview is not found in the empty JSON string", AnimeReview.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AnimeReview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnimeReview` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("review") != null && !jsonObj.get("review").isJsonNull()) && !jsonObj.get("review").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review").toString()));
      }
      // validate the optional field `scores`
      if (jsonObj.get("scores") != null && !jsonObj.get("scores").isJsonNull()) {
        AnimeReviewScores.validateJsonObject(jsonObj.getAsJsonObject("scores"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnimeReview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnimeReview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnimeReview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnimeReview.class));

       return (TypeAdapter<T>) new TypeAdapter<AnimeReview>() {
           @Override
           public void write(JsonWriter out, AnimeReview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnimeReview read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnimeReview given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnimeReview
  * @throws IOException if the JSON string is invalid with respect to AnimeReview
  */
  public static AnimeReview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnimeReview.class);
  }

 /**
  * Convert an instance of AnimeReview to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

