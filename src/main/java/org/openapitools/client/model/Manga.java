/*
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API. It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.  # Information  ‚ö° Jikan is powered by it's awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)  ## Rate Limiting  | Duration | Requests | |----|----| | Monthly | **Unlimited** | | Per Minute | 60 requests | | Per Second | 3 requests |   ## JSON Notes - Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`. - Any array or object property whose value does not exist or is undetermined, will be empty. - Any `score` property whose value does not exist or is undetermined, will be `0`. - All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone  ## Caching By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.  All requests, by default are cached for **24 hours** except the following endpoints which have their own unique cache **Time To Live**.   | Request | TTL | | ---- | ---- | | All (Default) | 24 hours |   The following response headers will detail cache information.  | Header | Remarks | | ---- | ---- | | `Expires` | Cache expiry date | | `Last-Modified` | Cache set date | | `X-Request-Fingerprint` | Unique request fingerprint |   Note: Caching headers will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.  They won't be available on pages which perform queries, like /anime, or /top/anime, etc.  ## Allowed HTTP(s) requests  **Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list. Only GET requests are supported which return READ-ONLY data.  ## HTTP Responses  | HTTP Status | Remarks | | ---- | ---- | | `200 - OK` | The request was successful | | `304 - Not Modified` | You have the latest data (Cache Validation response) | | `400 - Bad Request` | You've made an invalid request. Recheck documentation | | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` | | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed | | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) | | `500 - Internal Server Error` | Something is not working on our end. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue | | `503 - Service Unavailable` | The service has broke. |   ## JSON Error Response  ```json  {      \"status\": 404,      \"type\": \"BadResponseException\",      \"message\": \"Resource does not exist\",      \"error\": \"Something Happened\",      \"report_url\": \"https://github.com...\"   } ```  | Property | Remarks | | ---- | ---- | | `status` | Returned HTTP Status Code | | `type` | Thrown Exception | | `message` | Human-readable error message | | `error` | Error response and trace from the API | | `report_url` | Clicking this would redirect you to a generated GitHub issue. ‚Ñπ It's only returned on a parser error. |   ## Cache Validation  - All requests return a `ETag` header which is an MD5 hash of the response - You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header - You will get a HTTP `304 - Not Modified` response if the content has not changed - If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response  ![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')  ## Disclaimer  - Jikan is not affiliated with MyAnimeList.net. - Jikan is a free, open-source API. Please use it responsibly.  ----  By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.  [v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Daterange;
import org.openapitools.client.model.MalUrl;
import org.openapitools.client.model.MangaImages;
import org.openapitools.client.model.Title;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Manga Resource
 */
@ApiModel(description = "Manga Resource")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-08T15:18:52.497326700+05:30[Asia/Calcutta]")
public class Manga {
  public static final String SERIALIZED_NAME_MAL_ID = "mal_id";
  @SerializedName(SERIALIZED_NAME_MAL_ID)
  private Integer malId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private MangaImages images;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private List<Title> titles = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_ENGLISH = "title_english";
  @SerializedName(SERIALIZED_NAME_TITLE_ENGLISH)
  private String titleEnglish;

  public static final String SERIALIZED_NAME_TITLE_JAPANESE = "title_japanese";
  @SerializedName(SERIALIZED_NAME_TITLE_JAPANESE)
  private String titleJapanese;

  /**
   * Manga Type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MANGA("Manga"),
    
    NOVEL("Novel"),
    
    LIGHT_NOVEL("Light Novel"),
    
    ONE_SHOT("One-shot"),
    
    DOUJINSHI("Doujinshi"),
    
    MANHUA("Manhua"),
    
    MANHWA("Manhwa"),
    
    OEL("OEL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_CHAPTERS = "chapters";
  @SerializedName(SERIALIZED_NAME_CHAPTERS)
  private Integer chapters;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private Integer volumes;

  /**
   * Publishing status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    FINISHED("Finished"),
    
    PUBLISHING("Publishing"),
    
    ON_HIATUS("On Hiatus"),
    
    DISCONTINUED("Discontinued"),
    
    NOT_YET_PUBLISHED("Not yet published");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PUBLISHING = "publishing";
  @SerializedName(SERIALIZED_NAME_PUBLISHING)
  private Boolean publishing;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Daterange published;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SCORED_BY = "scored_by";
  @SerializedName(SERIALIZED_NAME_SCORED_BY)
  private Integer scoredBy;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  private Integer popularity;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private Integer members;

  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private Integer favorites;

  public static final String SERIALIZED_NAME_SYNOPSIS = "synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private String background;

  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private List<MalUrl> authors = null;

  public static final String SERIALIZED_NAME_SERIALIZATIONS = "serializations";
  @SerializedName(SERIALIZED_NAME_SERIALIZATIONS)
  private List<MalUrl> serializations = null;

  public static final String SERIALIZED_NAME_GENRES = "genres";
  @SerializedName(SERIALIZED_NAME_GENRES)
  private List<MalUrl> genres = null;

  public static final String SERIALIZED_NAME_EXPLICIT_GENRES = "explicit_genres";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_GENRES)
  private List<MalUrl> explicitGenres = null;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<MalUrl> themes = null;

  public static final String SERIALIZED_NAME_DEMOGRAPHICS = "demographics";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHICS)
  private List<MalUrl> demographics = null;

  public Manga() {
  }

  public Manga malId(Integer malId) {
    
    this.malId = malId;
    return this;
  }

   /**
   * MyAnimeList ID
   * @return malId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList ID")

  public Integer getMalId() {
    return malId;
  }


  public void setMalId(Integer malId) {
    this.malId = malId;
  }


  public Manga url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * MyAnimeList URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public Manga images(MangaImages images) {
    
    this.images = images;
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MangaImages getImages() {
    return images;
  }


  public void setImages(MangaImages images) {
    this.images = images;
  }


  public Manga approved(Boolean approved) {
    
    this.approved = approved;
    return this;
  }

   /**
   * Whether the entry is pending approval on MAL or not
   * @return approved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the entry is pending approval on MAL or not")

  public Boolean getApproved() {
    return approved;
  }


  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public Manga titles(List<Title> titles) {
    
    this.titles = titles;
    return this;
  }

  public Manga addTitlesItem(Title titlesItem) {
    if (this.titles == null) {
      this.titles = new ArrayList<>();
    }
    this.titles.add(titlesItem);
    return this;
  }

   /**
   * All Titles
   * @return titles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "All Titles")

  public List<Title> getTitles() {
    return titles;
  }


  public void setTitles(List<Title> titles) {
    this.titles = titles;
  }


  public Manga title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title
   * @return title
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public Manga titleEnglish(String titleEnglish) {
    
    this.titleEnglish = titleEnglish;
    return this;
  }

   /**
   * English Title
   * @return titleEnglish
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "English Title")

  public String getTitleEnglish() {
    return titleEnglish;
  }


  public void setTitleEnglish(String titleEnglish) {
    this.titleEnglish = titleEnglish;
  }


  public Manga titleJapanese(String titleJapanese) {
    
    this.titleJapanese = titleJapanese;
    return this;
  }

   /**
   * Japanese Title
   * @return titleJapanese
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Japanese Title")

  public String getTitleJapanese() {
    return titleJapanese;
  }


  public void setTitleJapanese(String titleJapanese) {
    this.titleJapanese = titleJapanese;
  }


  public Manga type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Manga Type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Manga Type")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Manga chapters(Integer chapters) {
    
    this.chapters = chapters;
    return this;
  }

   /**
   * Chapter count
   * @return chapters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Chapter count")

  public Integer getChapters() {
    return chapters;
  }


  public void setChapters(Integer chapters) {
    this.chapters = chapters;
  }


  public Manga volumes(Integer volumes) {
    
    this.volumes = volumes;
    return this;
  }

   /**
   * Volume count
   * @return volumes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Volume count")

  public Integer getVolumes() {
    return volumes;
  }


  public void setVolumes(Integer volumes) {
    this.volumes = volumes;
  }


  public Manga status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Publishing status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Publishing status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Manga publishing(Boolean publishing) {
    
    this.publishing = publishing;
    return this;
  }

   /**
   * Publishing boolean
   * @return publishing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Publishing boolean")

  public Boolean getPublishing() {
    return publishing;
  }


  public void setPublishing(Boolean publishing) {
    this.publishing = publishing;
  }


  public Manga published(Daterange published) {
    
    this.published = published;
    return this;
  }

   /**
   * Get published
   * @return published
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Daterange getPublished() {
    return published;
  }


  public void setPublished(Daterange published) {
    this.published = published;
  }


  public Manga score(Float score) {
    
    this.score = score;
    return this;
  }

   /**
   * Score
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Score")

  public Float getScore() {
    return score;
  }


  public void setScore(Float score) {
    this.score = score;
  }


  public Manga scoredBy(Integer scoredBy) {
    
    this.scoredBy = scoredBy;
    return this;
  }

   /**
   * Number of users
   * @return scoredBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of users")

  public Integer getScoredBy() {
    return scoredBy;
  }


  public void setScoredBy(Integer scoredBy) {
    this.scoredBy = scoredBy;
  }


  public Manga rank(Integer rank) {
    
    this.rank = rank;
    return this;
  }

   /**
   * Ranking
   * @return rank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ranking")

  public Integer getRank() {
    return rank;
  }


  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public Manga popularity(Integer popularity) {
    
    this.popularity = popularity;
    return this;
  }

   /**
   * Popularity
   * @return popularity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Popularity")

  public Integer getPopularity() {
    return popularity;
  }


  public void setPopularity(Integer popularity) {
    this.popularity = popularity;
  }


  public Manga members(Integer members) {
    
    this.members = members;
    return this;
  }

   /**
   * Number of users who have added this entry to their list
   * @return members
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of users who have added this entry to their list")

  public Integer getMembers() {
    return members;
  }


  public void setMembers(Integer members) {
    this.members = members;
  }


  public Manga favorites(Integer favorites) {
    
    this.favorites = favorites;
    return this;
  }

   /**
   * Number of users who have favorited this entry
   * @return favorites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of users who have favorited this entry")

  public Integer getFavorites() {
    return favorites;
  }


  public void setFavorites(Integer favorites) {
    this.favorites = favorites;
  }


  public Manga synopsis(String synopsis) {
    
    this.synopsis = synopsis;
    return this;
  }

   /**
   * Synopsis
   * @return synopsis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Synopsis")

  public String getSynopsis() {
    return synopsis;
  }


  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }


  public Manga background(String background) {
    
    this.background = background;
    return this;
  }

   /**
   * Background
   * @return background
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Background")

  public String getBackground() {
    return background;
  }


  public void setBackground(String background) {
    this.background = background;
  }


  public Manga authors(List<MalUrl> authors) {
    
    this.authors = authors;
    return this;
  }

  public Manga addAuthorsItem(MalUrl authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<>();
    }
    this.authors.add(authorsItem);
    return this;
  }

   /**
   * Get authors
   * @return authors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getAuthors() {
    return authors;
  }


  public void setAuthors(List<MalUrl> authors) {
    this.authors = authors;
  }


  public Manga serializations(List<MalUrl> serializations) {
    
    this.serializations = serializations;
    return this;
  }

  public Manga addSerializationsItem(MalUrl serializationsItem) {
    if (this.serializations == null) {
      this.serializations = new ArrayList<>();
    }
    this.serializations.add(serializationsItem);
    return this;
  }

   /**
   * Get serializations
   * @return serializations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getSerializations() {
    return serializations;
  }


  public void setSerializations(List<MalUrl> serializations) {
    this.serializations = serializations;
  }


  public Manga genres(List<MalUrl> genres) {
    
    this.genres = genres;
    return this;
  }

  public Manga addGenresItem(MalUrl genresItem) {
    if (this.genres == null) {
      this.genres = new ArrayList<>();
    }
    this.genres.add(genresItem);
    return this;
  }

   /**
   * Get genres
   * @return genres
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getGenres() {
    return genres;
  }


  public void setGenres(List<MalUrl> genres) {
    this.genres = genres;
  }


  public Manga explicitGenres(List<MalUrl> explicitGenres) {
    
    this.explicitGenres = explicitGenres;
    return this;
  }

  public Manga addExplicitGenresItem(MalUrl explicitGenresItem) {
    if (this.explicitGenres == null) {
      this.explicitGenres = new ArrayList<>();
    }
    this.explicitGenres.add(explicitGenresItem);
    return this;
  }

   /**
   * Get explicitGenres
   * @return explicitGenres
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getExplicitGenres() {
    return explicitGenres;
  }


  public void setExplicitGenres(List<MalUrl> explicitGenres) {
    this.explicitGenres = explicitGenres;
  }


  public Manga themes(List<MalUrl> themes) {
    
    this.themes = themes;
    return this;
  }

  public Manga addThemesItem(MalUrl themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

   /**
   * Get themes
   * @return themes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getThemes() {
    return themes;
  }


  public void setThemes(List<MalUrl> themes) {
    this.themes = themes;
  }


  public Manga demographics(List<MalUrl> demographics) {
    
    this.demographics = demographics;
    return this;
  }

  public Manga addDemographicsItem(MalUrl demographicsItem) {
    if (this.demographics == null) {
      this.demographics = new ArrayList<>();
    }
    this.demographics.add(demographicsItem);
    return this;
  }

   /**
   * Get demographics
   * @return demographics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getDemographics() {
    return demographics;
  }


  public void setDemographics(List<MalUrl> demographics) {
    this.demographics = demographics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Manga manga = (Manga) o;
    return Objects.equals(this.malId, manga.malId) &&
        Objects.equals(this.url, manga.url) &&
        Objects.equals(this.images, manga.images) &&
        Objects.equals(this.approved, manga.approved) &&
        Objects.equals(this.titles, manga.titles) &&
        Objects.equals(this.title, manga.title) &&
        Objects.equals(this.titleEnglish, manga.titleEnglish) &&
        Objects.equals(this.titleJapanese, manga.titleJapanese) &&
        Objects.equals(this.type, manga.type) &&
        Objects.equals(this.chapters, manga.chapters) &&
        Objects.equals(this.volumes, manga.volumes) &&
        Objects.equals(this.status, manga.status) &&
        Objects.equals(this.publishing, manga.publishing) &&
        Objects.equals(this.published, manga.published) &&
        Objects.equals(this.score, manga.score) &&
        Objects.equals(this.scoredBy, manga.scoredBy) &&
        Objects.equals(this.rank, manga.rank) &&
        Objects.equals(this.popularity, manga.popularity) &&
        Objects.equals(this.members, manga.members) &&
        Objects.equals(this.favorites, manga.favorites) &&
        Objects.equals(this.synopsis, manga.synopsis) &&
        Objects.equals(this.background, manga.background) &&
        Objects.equals(this.authors, manga.authors) &&
        Objects.equals(this.serializations, manga.serializations) &&
        Objects.equals(this.genres, manga.genres) &&
        Objects.equals(this.explicitGenres, manga.explicitGenres) &&
        Objects.equals(this.themes, manga.themes) &&
        Objects.equals(this.demographics, manga.demographics);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(malId, url, images, approved, titles, title, titleEnglish, titleJapanese, type, chapters, volumes, status, publishing, published, score, scoredBy, rank, popularity, members, favorites, synopsis, background, authors, serializations, genres, explicitGenres, themes, demographics);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Manga {\n");
    sb.append("    malId: ").append(toIndentedString(malId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleEnglish: ").append(toIndentedString(titleEnglish)).append("\n");
    sb.append("    titleJapanese: ").append(toIndentedString(titleJapanese)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    chapters: ").append(toIndentedString(chapters)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    publishing: ").append(toIndentedString(publishing)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scoredBy: ").append(toIndentedString(scoredBy)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    serializations: ").append(toIndentedString(serializations)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    explicitGenres: ").append(toIndentedString(explicitGenres)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mal_id");
    openapiFields.add("url");
    openapiFields.add("images");
    openapiFields.add("approved");
    openapiFields.add("titles");
    openapiFields.add("title");
    openapiFields.add("title_english");
    openapiFields.add("title_japanese");
    openapiFields.add("type");
    openapiFields.add("chapters");
    openapiFields.add("volumes");
    openapiFields.add("status");
    openapiFields.add("publishing");
    openapiFields.add("published");
    openapiFields.add("score");
    openapiFields.add("scored_by");
    openapiFields.add("rank");
    openapiFields.add("popularity");
    openapiFields.add("members");
    openapiFields.add("favorites");
    openapiFields.add("synopsis");
    openapiFields.add("background");
    openapiFields.add("authors");
    openapiFields.add("serializations");
    openapiFields.add("genres");
    openapiFields.add("explicit_genres");
    openapiFields.add("themes");
    openapiFields.add("demographics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Manga
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Manga.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Manga is not found in the empty JSON string", Manga.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Manga.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Manga` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        MangaImages.validateJsonObject(jsonObj.getAsJsonObject("images"));
      }
      if (jsonObj.get("titles") != null && !jsonObj.get("titles").isJsonNull()) {
        JsonArray jsonArraytitles = jsonObj.getAsJsonArray("titles");
        if (jsonArraytitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("titles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `titles` to be an array in the JSON string but got `%s`", jsonObj.get("titles").toString()));
          }

          // validate the optional field `titles` (array)
          for (int i = 0; i < jsonArraytitles.size(); i++) {
            Title.validateJsonObject(jsonArraytitles.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("title_english") != null && !jsonObj.get("title_english").isJsonNull()) && !jsonObj.get("title_english").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_english` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_english").toString()));
      }
      if ((jsonObj.get("title_japanese") != null && !jsonObj.get("title_japanese").isJsonNull()) && !jsonObj.get("title_japanese").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_japanese` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_japanese").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `published`
      if (jsonObj.get("published") != null && !jsonObj.get("published").isJsonNull()) {
        Daterange.validateJsonObject(jsonObj.getAsJsonObject("published"));
      }
      if ((jsonObj.get("synopsis") != null && !jsonObj.get("synopsis").isJsonNull()) && !jsonObj.get("synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synopsis").toString()));
      }
      if ((jsonObj.get("background") != null && !jsonObj.get("background").isJsonNull()) && !jsonObj.get("background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background").toString()));
      }
      if (jsonObj.get("authors") != null && !jsonObj.get("authors").isJsonNull()) {
        JsonArray jsonArrayauthors = jsonObj.getAsJsonArray("authors");
        if (jsonArrayauthors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authors` to be an array in the JSON string but got `%s`", jsonObj.get("authors").toString()));
          }

          // validate the optional field `authors` (array)
          for (int i = 0; i < jsonArrayauthors.size(); i++) {
            MalUrl.validateJsonObject(jsonArrayauthors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("serializations") != null && !jsonObj.get("serializations").isJsonNull()) {
        JsonArray jsonArrayserializations = jsonObj.getAsJsonArray("serializations");
        if (jsonArrayserializations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serializations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serializations` to be an array in the JSON string but got `%s`", jsonObj.get("serializations").toString()));
          }

          // validate the optional field `serializations` (array)
          for (int i = 0; i < jsonArrayserializations.size(); i++) {
            MalUrl.validateJsonObject(jsonArrayserializations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("genres") != null && !jsonObj.get("genres").isJsonNull()) {
        JsonArray jsonArraygenres = jsonObj.getAsJsonArray("genres");
        if (jsonArraygenres != null) {
          // ensure the json data is an array
          if (!jsonObj.get("genres").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `genres` to be an array in the JSON string but got `%s`", jsonObj.get("genres").toString()));
          }

          // validate the optional field `genres` (array)
          for (int i = 0; i < jsonArraygenres.size(); i++) {
            MalUrl.validateJsonObject(jsonArraygenres.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("explicit_genres") != null && !jsonObj.get("explicit_genres").isJsonNull()) {
        JsonArray jsonArrayexplicitGenres = jsonObj.getAsJsonArray("explicit_genres");
        if (jsonArrayexplicitGenres != null) {
          // ensure the json data is an array
          if (!jsonObj.get("explicit_genres").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `explicit_genres` to be an array in the JSON string but got `%s`", jsonObj.get("explicit_genres").toString()));
          }

          // validate the optional field `explicit_genres` (array)
          for (int i = 0; i < jsonArrayexplicitGenres.size(); i++) {
            MalUrl.validateJsonObject(jsonArrayexplicitGenres.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("themes") != null && !jsonObj.get("themes").isJsonNull()) {
        JsonArray jsonArraythemes = jsonObj.getAsJsonArray("themes");
        if (jsonArraythemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("themes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
          }

          // validate the optional field `themes` (array)
          for (int i = 0; i < jsonArraythemes.size(); i++) {
            MalUrl.validateJsonObject(jsonArraythemes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("demographics") != null && !jsonObj.get("demographics").isJsonNull()) {
        JsonArray jsonArraydemographics = jsonObj.getAsJsonArray("demographics");
        if (jsonArraydemographics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("demographics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `demographics` to be an array in the JSON string but got `%s`", jsonObj.get("demographics").toString()));
          }

          // validate the optional field `demographics` (array)
          for (int i = 0; i < jsonArraydemographics.size(); i++) {
            MalUrl.validateJsonObject(jsonArraydemographics.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Manga.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Manga' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Manga> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Manga.class));

       return (TypeAdapter<T>) new TypeAdapter<Manga>() {
           @Override
           public void write(JsonWriter out, Manga value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Manga read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Manga given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Manga
  * @throws IOException if the JSON string is invalid with respect to Manga
  */
  public static Manga fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Manga.class);
  }

 /**
  * Convert an instance of Manga to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

