/*
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API. It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.  # Information  ‚ö° Jikan is powered by it's awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)  ## Rate Limiting  | Duration | Requests | |----|----| | Monthly | **Unlimited** | | Per Minute | 60 requests | | Per Second | 3 requests |   ## JSON Notes - Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`. - Any array or object property whose value does not exist or is undetermined, will be empty. - Any `score` property whose value does not exist or is undetermined, will be `0`. - All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone  ## Caching By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.  All requests, by default are cached for **24 hours** except the following endpoints which have their own unique cache **Time To Live**.   | Request | TTL | | ---- | ---- | | All (Default) | 24 hours |   The following response headers will detail cache information.  | Header | Remarks | | ---- | ---- | | `Expires` | Cache expiry date | | `Last-Modified` | Cache set date | | `X-Request-Fingerprint` | Unique request fingerprint |   Note: Caching headers will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.  They won't be available on pages which perform queries, like /anime, or /top/anime, etc.  ## Allowed HTTP(s) requests  **Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list. Only GET requests are supported which return READ-ONLY data.  ## HTTP Responses  | HTTP Status | Remarks | | ---- | ---- | | `200 - OK` | The request was successful | | `304 - Not Modified` | You have the latest data (Cache Validation response) | | `400 - Bad Request` | You've made an invalid request. Recheck documentation | | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` | | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed | | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) | | `500 - Internal Server Error` | Something is not working on our end. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue | | `503 - Service Unavailable` | The service has broke. |   ## JSON Error Response  ```json  {      \"status\": 404,      \"type\": \"BadResponseException\",      \"message\": \"Resource does not exist\",      \"error\": \"Something Happened\",      \"report_url\": \"https://github.com...\"   } ```  | Property | Remarks | | ---- | ---- | | `status` | Returned HTTP Status Code | | `type` | Thrown Exception | | `message` | Human-readable error message | | `error` | Error response and trace from the API | | `report_url` | Clicking this would redirect you to a generated GitHub issue. ‚Ñπ It's only returned on a parser error. |   ## Cache Validation  - All requests return a `ETag` header which is an MD5 hash of the response - You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header - You will get a HTTP `304 - Not Modified` response if the content has not changed - If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response  ![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')  ## Disclaimer  - Jikan is not affiliated with MyAnimeList.net. - Jikan is a free, open-source API. Please use it responsibly.  ----  By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.  [v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AnimeFullExternalInner;
import org.openapitools.client.model.UserImages;
import org.openapitools.client.model.UserProfileFullStatistics;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transform the resource into an array.
 */
@ApiModel(description = "Transform the resource into an array.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-08T15:34:51.366952+05:30[Asia/Calcutta]")
public class UserProfileFull {
  public static final String SERIALIZED_NAME_MAL_ID = "mal_id";
  @SerializedName(SERIALIZED_NAME_MAL_ID)
  private Integer malId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private UserImages images;

  public static final String SERIALIZED_NAME_LAST_ONLINE = "last_online";
  @SerializedName(SERIALIZED_NAME_LAST_ONLINE)
  private String lastOnline;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private String birthday;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_JOINED = "joined";
  @SerializedName(SERIALIZED_NAME_JOINED)
  private String joined;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private UserProfileFullStatistics statistics;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private List<AnimeFullExternalInner> external = null;

  public UserProfileFull() {
  }

  public UserProfileFull malId(Integer malId) {
    
    this.malId = malId;
    return this;
  }

   /**
   * MyAnimeList ID
   * @return malId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList ID")

  public Integer getMalId() {
    return malId;
  }


  public void setMalId(Integer malId) {
    this.malId = malId;
  }


  public UserProfileFull username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * MyAnimeList Username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList Username")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public UserProfileFull url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * MyAnimeList URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public UserProfileFull images(UserImages images) {
    
    this.images = images;
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserImages getImages() {
    return images;
  }


  public void setImages(UserImages images) {
    this.images = images;
  }


  public UserProfileFull lastOnline(String lastOnline) {
    
    this.lastOnline = lastOnline;
    return this;
  }

   /**
   * Last Online Date ISO8601
   * @return lastOnline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last Online Date ISO8601")

  public String getLastOnline() {
    return lastOnline;
  }


  public void setLastOnline(String lastOnline) {
    this.lastOnline = lastOnline;
  }


  public UserProfileFull gender(String gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * User Gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User Gender")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    this.gender = gender;
  }


  public UserProfileFull birthday(String birthday) {
    
    this.birthday = birthday;
    return this;
  }

   /**
   * Birthday Date ISO8601
   * @return birthday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Birthday Date ISO8601")

  public String getBirthday() {
    return birthday;
  }


  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }


  public UserProfileFull location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * Location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    this.location = location;
  }


  public UserProfileFull joined(String joined) {
    
    this.joined = joined;
    return this;
  }

   /**
   * Joined Date ISO8601
   * @return joined
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Joined Date ISO8601")

  public String getJoined() {
    return joined;
  }


  public void setJoined(String joined) {
    this.joined = joined;
  }


  public UserProfileFull statistics(UserProfileFullStatistics statistics) {
    
    this.statistics = statistics;
    return this;
  }

   /**
   * Get statistics
   * @return statistics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserProfileFullStatistics getStatistics() {
    return statistics;
  }


  public void setStatistics(UserProfileFullStatistics statistics) {
    this.statistics = statistics;
  }


  public UserProfileFull external(List<AnimeFullExternalInner> external) {
    
    this.external = external;
    return this;
  }

  public UserProfileFull addExternalItem(AnimeFullExternalInner externalItem) {
    if (this.external == null) {
      this.external = new ArrayList<>();
    }
    this.external.add(externalItem);
    return this;
  }

   /**
   * Get external
   * @return external
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AnimeFullExternalInner> getExternal() {
    return external;
  }


  public void setExternal(List<AnimeFullExternalInner> external) {
    this.external = external;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProfileFull userProfileFull = (UserProfileFull) o;
    return Objects.equals(this.malId, userProfileFull.malId) &&
        Objects.equals(this.username, userProfileFull.username) &&
        Objects.equals(this.url, userProfileFull.url) &&
        Objects.equals(this.images, userProfileFull.images) &&
        Objects.equals(this.lastOnline, userProfileFull.lastOnline) &&
        Objects.equals(this.gender, userProfileFull.gender) &&
        Objects.equals(this.birthday, userProfileFull.birthday) &&
        Objects.equals(this.location, userProfileFull.location) &&
        Objects.equals(this.joined, userProfileFull.joined) &&
        Objects.equals(this.statistics, userProfileFull.statistics) &&
        Objects.equals(this.external, userProfileFull.external);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(malId, username, url, images, lastOnline, gender, birthday, location, joined, statistics, external);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProfileFull {\n");
    sb.append("    malId: ").append(toIndentedString(malId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    lastOnline: ").append(toIndentedString(lastOnline)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    joined: ").append(toIndentedString(joined)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mal_id");
    openapiFields.add("username");
    openapiFields.add("url");
    openapiFields.add("images");
    openapiFields.add("last_online");
    openapiFields.add("gender");
    openapiFields.add("birthday");
    openapiFields.add("location");
    openapiFields.add("joined");
    openapiFields.add("statistics");
    openapiFields.add("external");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserProfileFull
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UserProfileFull.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProfileFull is not found in the empty JSON string", UserProfileFull.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserProfileFull.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProfileFull` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        UserImages.validateJsonObject(jsonObj.getAsJsonObject("images"));
      }
      if ((jsonObj.get("last_online") != null && !jsonObj.get("last_online").isJsonNull()) && !jsonObj.get("last_online").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_online` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_online").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("joined") != null && !jsonObj.get("joined").isJsonNull()) && !jsonObj.get("joined").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joined` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joined").toString()));
      }
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        UserProfileFullStatistics.validateJsonObject(jsonObj.getAsJsonObject("statistics"));
      }
      if (jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) {
        JsonArray jsonArrayexternal = jsonObj.getAsJsonArray("external");
        if (jsonArrayexternal != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external` to be an array in the JSON string but got `%s`", jsonObj.get("external").toString()));
          }

          // validate the optional field `external` (array)
          for (int i = 0; i < jsonArrayexternal.size(); i++) {
            AnimeFullExternalInner.validateJsonObject(jsonArrayexternal.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProfileFull.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProfileFull' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProfileFull> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProfileFull.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProfileFull>() {
           @Override
           public void write(JsonWriter out, UserProfileFull value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProfileFull read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserProfileFull given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserProfileFull
  * @throws IOException if the JSON string is invalid with respect to UserProfileFull
  */
  public static UserProfileFull fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProfileFull.class);
  }

 /**
  * Convert an instance of UserProfileFull to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

