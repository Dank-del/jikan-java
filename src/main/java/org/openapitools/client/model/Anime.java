/*
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API. It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.  # Information  ‚ö° Jikan is powered by it's awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)  ## Rate Limiting  | Duration | Requests | |----|----| | Monthly | **Unlimited** | | Per Minute | 60 requests | | Per Second | 3 requests |   ## JSON Notes - Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`. - Any array or object property whose value does not exist or is undetermined, will be empty. - Any `score` property whose value does not exist or is undetermined, will be `0`. - All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone  ## Caching By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.  All requests, by default are cached for **24 hours** except the following endpoints which have their own unique cache **Time To Live**.   | Request | TTL | | ---- | ---- | | All (Default) | 24 hours |   The following response headers will detail cache information.  | Header | Remarks | | ---- | ---- | | `Expires` | Cache expiry date | | `Last-Modified` | Cache set date | | `X-Request-Fingerprint` | Unique request fingerprint |   Note: Caching headers will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.  They won't be available on pages which perform queries, like /anime, or /top/anime, etc.  ## Allowed HTTP(s) requests  **Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list. Only GET requests are supported which return READ-ONLY data.  ## HTTP Responses  | HTTP Status | Remarks | | ---- | ---- | | `200 - OK` | The request was successful | | `304 - Not Modified` | You have the latest data (Cache Validation response) | | `400 - Bad Request` | You've made an invalid request. Recheck documentation | | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` | | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed | | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) | | `500 - Internal Server Error` | Something is not working on our end. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue | | `503 - Service Unavailable` | The service has broke. |   ## JSON Error Response  ```json  {      \"status\": 404,      \"type\": \"BadResponseException\",      \"message\": \"Resource does not exist\",      \"error\": \"Something Happened\",      \"report_url\": \"https://github.com...\"   } ```  | Property | Remarks | | ---- | ---- | | `status` | Returned HTTP Status Code | | `type` | Thrown Exception | | `message` | Human-readable error message | | `error` | Error response and trace from the API | | `report_url` | Clicking this would redirect you to a generated GitHub issue. ‚Ñπ It's only returned on a parser error. |   ## Cache Validation  - All requests return a `ETag` header which is an MD5 hash of the response - You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header - You will get a HTTP `304 - Not Modified` response if the content has not changed - If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response  ![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')  ## Disclaimer  - Jikan is not affiliated with MyAnimeList.net. - Jikan is a free, open-source API. Please use it responsibly.  ----  By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.  [v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AnimeImages;
import org.openapitools.client.model.Broadcast;
import org.openapitools.client.model.Daterange;
import org.openapitools.client.model.MalUrl;
import org.openapitools.client.model.Title;
import org.openapitools.client.model.TrailerBase;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Anime Resource
 */
@ApiModel(description = "Anime Resource")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-08T15:34:51.366952+05:30[Asia/Calcutta]")
public class Anime {
  public static final String SERIALIZED_NAME_MAL_ID = "mal_id";
  @SerializedName(SERIALIZED_NAME_MAL_ID)
  private Integer malId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private AnimeImages images;

  public static final String SERIALIZED_NAME_TRAILER = "trailer";
  @SerializedName(SERIALIZED_NAME_TRAILER)
  private TrailerBase trailer;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private List<Title> titles = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_ENGLISH = "title_english";
  @SerializedName(SERIALIZED_NAME_TITLE_ENGLISH)
  private String titleEnglish;

  public static final String SERIALIZED_NAME_TITLE_JAPANESE = "title_japanese";
  @SerializedName(SERIALIZED_NAME_TITLE_JAPANESE)
  private String titleJapanese;

  public static final String SERIALIZED_NAME_TITLE_SYNONYMS = "title_synonyms";
  @SerializedName(SERIALIZED_NAME_TITLE_SYNONYMS)
  private List<String> titleSynonyms = null;

  /**
   * Anime Type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TV("TV"),
    
    OVA("OVA"),
    
    MOVIE("Movie"),
    
    SPECIAL("Special"),
    
    ONA("ONA"),
    
    MUSIC("Music");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private Integer episodes;

  /**
   * Airing status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    FINISHED_AIRING("Finished Airing"),
    
    CURRENTLY_AIRING("Currently Airing"),
    
    NOT_YET_AIRED("Not yet aired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_AIRING = "airing";
  @SerializedName(SERIALIZED_NAME_AIRING)
  private Boolean airing;

  public static final String SERIALIZED_NAME_AIRED = "aired";
  @SerializedName(SERIALIZED_NAME_AIRED)
  private Daterange aired;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  /**
   * Anime audience rating
   */
  @JsonAdapter(RatingEnum.Adapter.class)
  public enum RatingEnum {
    G_ALL_AGES("G - All Ages"),
    
    PG_CHILDREN("PG - Children"),
    
    PG_13_TEENS_13_OR_OLDER("PG-13 - Teens 13 or older"),
    
    R_17_VIOLENCE_PROFANITY_("R - 17+ (violence & profanity)"),
    
    R_MILD_NUDITY("R+ - Mild Nudity"),
    
    RX_HENTAI("Rx - Hentai");

    private String value;

    RatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RatingEnum fromValue(String value) {
      for (RatingEnum b : RatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RatingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingEnum rating;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SCORED_BY = "scored_by";
  @SerializedName(SERIALIZED_NAME_SCORED_BY)
  private Integer scoredBy;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  private Integer popularity;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private Integer members;

  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private Integer favorites;

  public static final String SERIALIZED_NAME_SYNOPSIS = "synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private String background;

  /**
   * Season
   */
  @JsonAdapter(SeasonEnum.Adapter.class)
  public enum SeasonEnum {
    SUMMER("summer"),
    
    WINTER("winter"),
    
    SPRING("spring"),
    
    FALL("fall");

    private String value;

    SeasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeasonEnum fromValue(String value) {
      for (SeasonEnum b : SeasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SeasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private SeasonEnum season;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public static final String SERIALIZED_NAME_BROADCAST = "broadcast";
  @SerializedName(SERIALIZED_NAME_BROADCAST)
  private Broadcast broadcast;

  public static final String SERIALIZED_NAME_PRODUCERS = "producers";
  @SerializedName(SERIALIZED_NAME_PRODUCERS)
  private List<MalUrl> producers = null;

  public static final String SERIALIZED_NAME_LICENSORS = "licensors";
  @SerializedName(SERIALIZED_NAME_LICENSORS)
  private List<MalUrl> licensors = null;

  public static final String SERIALIZED_NAME_STUDIOS = "studios";
  @SerializedName(SERIALIZED_NAME_STUDIOS)
  private List<MalUrl> studios = null;

  public static final String SERIALIZED_NAME_GENRES = "genres";
  @SerializedName(SERIALIZED_NAME_GENRES)
  private List<MalUrl> genres = null;

  public static final String SERIALIZED_NAME_EXPLICIT_GENRES = "explicit_genres";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_GENRES)
  private List<MalUrl> explicitGenres = null;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<MalUrl> themes = null;

  public static final String SERIALIZED_NAME_DEMOGRAPHICS = "demographics";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHICS)
  private List<MalUrl> demographics = null;

  public Anime() {
  }

  public Anime malId(Integer malId) {
    
    this.malId = malId;
    return this;
  }

   /**
   * MyAnimeList ID
   * @return malId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList ID")

  public Integer getMalId() {
    return malId;
  }


  public void setMalId(Integer malId) {
    this.malId = malId;
  }


  public Anime url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * MyAnimeList URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public Anime images(AnimeImages images) {
    
    this.images = images;
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnimeImages getImages() {
    return images;
  }


  public void setImages(AnimeImages images) {
    this.images = images;
  }


  public Anime trailer(TrailerBase trailer) {
    
    this.trailer = trailer;
    return this;
  }

   /**
   * Get trailer
   * @return trailer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrailerBase getTrailer() {
    return trailer;
  }


  public void setTrailer(TrailerBase trailer) {
    this.trailer = trailer;
  }


  public Anime approved(Boolean approved) {
    
    this.approved = approved;
    return this;
  }

   /**
   * Whether the entry is pending approval on MAL or not
   * @return approved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the entry is pending approval on MAL or not")

  public Boolean getApproved() {
    return approved;
  }


  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public Anime titles(List<Title> titles) {
    
    this.titles = titles;
    return this;
  }

  public Anime addTitlesItem(Title titlesItem) {
    if (this.titles == null) {
      this.titles = new ArrayList<>();
    }
    this.titles.add(titlesItem);
    return this;
  }

   /**
   * All titles
   * @return titles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "All titles")

  public List<Title> getTitles() {
    return titles;
  }


  public void setTitles(List<Title> titles) {
    this.titles = titles;
  }


  public Anime title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title
   * @return title
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public Anime titleEnglish(String titleEnglish) {
    
    this.titleEnglish = titleEnglish;
    return this;
  }

   /**
   * English Title
   * @return titleEnglish
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "English Title")

  public String getTitleEnglish() {
    return titleEnglish;
  }


  public void setTitleEnglish(String titleEnglish) {
    this.titleEnglish = titleEnglish;
  }


  public Anime titleJapanese(String titleJapanese) {
    
    this.titleJapanese = titleJapanese;
    return this;
  }

   /**
   * Japanese Title
   * @return titleJapanese
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Japanese Title")

  public String getTitleJapanese() {
    return titleJapanese;
  }


  public void setTitleJapanese(String titleJapanese) {
    this.titleJapanese = titleJapanese;
  }


  public Anime titleSynonyms(List<String> titleSynonyms) {
    
    this.titleSynonyms = titleSynonyms;
    return this;
  }

  public Anime addTitleSynonymsItem(String titleSynonymsItem) {
    if (this.titleSynonyms == null) {
      this.titleSynonyms = new ArrayList<>();
    }
    this.titleSynonyms.add(titleSynonymsItem);
    return this;
  }

   /**
   * Other Titles
   * @return titleSynonyms
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Other Titles")

  public List<String> getTitleSynonyms() {
    return titleSynonyms;
  }


  public void setTitleSynonyms(List<String> titleSynonyms) {
    this.titleSynonyms = titleSynonyms;
  }


  public Anime type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Anime Type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Anime Type")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Anime source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Original Material/Source adapted from
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Original Material/Source adapted from")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public Anime episodes(Integer episodes) {
    
    this.episodes = episodes;
    return this;
  }

   /**
   * Episode count
   * @return episodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Episode count")

  public Integer getEpisodes() {
    return episodes;
  }


  public void setEpisodes(Integer episodes) {
    this.episodes = episodes;
  }


  public Anime status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Airing status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Airing status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Anime airing(Boolean airing) {
    
    this.airing = airing;
    return this;
  }

   /**
   * Airing boolean
   * @return airing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Airing boolean")

  public Boolean getAiring() {
    return airing;
  }


  public void setAiring(Boolean airing) {
    this.airing = airing;
  }


  public Anime aired(Daterange aired) {
    
    this.aired = aired;
    return this;
  }

   /**
   * Get aired
   * @return aired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Daterange getAired() {
    return aired;
  }


  public void setAired(Daterange aired) {
    this.aired = aired;
  }


  public Anime duration(String duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Parsed raw duration
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parsed raw duration")

  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    this.duration = duration;
  }


  public Anime rating(RatingEnum rating) {
    
    this.rating = rating;
    return this;
  }

   /**
   * Anime audience rating
   * @return rating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Anime audience rating")

  public RatingEnum getRating() {
    return rating;
  }


  public void setRating(RatingEnum rating) {
    this.rating = rating;
  }


  public Anime score(Float score) {
    
    this.score = score;
    return this;
  }

   /**
   * Score
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Score")

  public Float getScore() {
    return score;
  }


  public void setScore(Float score) {
    this.score = score;
  }


  public Anime scoredBy(Integer scoredBy) {
    
    this.scoredBy = scoredBy;
    return this;
  }

   /**
   * Number of users
   * @return scoredBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of users")

  public Integer getScoredBy() {
    return scoredBy;
  }


  public void setScoredBy(Integer scoredBy) {
    this.scoredBy = scoredBy;
  }


  public Anime rank(Integer rank) {
    
    this.rank = rank;
    return this;
  }

   /**
   * Ranking
   * @return rank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ranking")

  public Integer getRank() {
    return rank;
  }


  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public Anime popularity(Integer popularity) {
    
    this.popularity = popularity;
    return this;
  }

   /**
   * Popularity
   * @return popularity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Popularity")

  public Integer getPopularity() {
    return popularity;
  }


  public void setPopularity(Integer popularity) {
    this.popularity = popularity;
  }


  public Anime members(Integer members) {
    
    this.members = members;
    return this;
  }

   /**
   * Number of users who have added this entry to their list
   * @return members
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of users who have added this entry to their list")

  public Integer getMembers() {
    return members;
  }


  public void setMembers(Integer members) {
    this.members = members;
  }


  public Anime favorites(Integer favorites) {
    
    this.favorites = favorites;
    return this;
  }

   /**
   * Number of users who have favorited this entry
   * @return favorites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of users who have favorited this entry")

  public Integer getFavorites() {
    return favorites;
  }


  public void setFavorites(Integer favorites) {
    this.favorites = favorites;
  }


  public Anime synopsis(String synopsis) {
    
    this.synopsis = synopsis;
    return this;
  }

   /**
   * Synopsis
   * @return synopsis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Synopsis")

  public String getSynopsis() {
    return synopsis;
  }


  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }


  public Anime background(String background) {
    
    this.background = background;
    return this;
  }

   /**
   * Background
   * @return background
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Background")

  public String getBackground() {
    return background;
  }


  public void setBackground(String background) {
    this.background = background;
  }


  public Anime season(SeasonEnum season) {
    
    this.season = season;
    return this;
  }

   /**
   * Season
   * @return season
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Season")

  public SeasonEnum getSeason() {
    return season;
  }


  public void setSeason(SeasonEnum season) {
    this.season = season;
  }


  public Anime year(Integer year) {
    
    this.year = year;
    return this;
  }

   /**
   * Year
   * @return year
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year")

  public Integer getYear() {
    return year;
  }


  public void setYear(Integer year) {
    this.year = year;
  }


  public Anime broadcast(Broadcast broadcast) {
    
    this.broadcast = broadcast;
    return this;
  }

   /**
   * Get broadcast
   * @return broadcast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Broadcast getBroadcast() {
    return broadcast;
  }


  public void setBroadcast(Broadcast broadcast) {
    this.broadcast = broadcast;
  }


  public Anime producers(List<MalUrl> producers) {
    
    this.producers = producers;
    return this;
  }

  public Anime addProducersItem(MalUrl producersItem) {
    if (this.producers == null) {
      this.producers = new ArrayList<>();
    }
    this.producers.add(producersItem);
    return this;
  }

   /**
   * Get producers
   * @return producers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getProducers() {
    return producers;
  }


  public void setProducers(List<MalUrl> producers) {
    this.producers = producers;
  }


  public Anime licensors(List<MalUrl> licensors) {
    
    this.licensors = licensors;
    return this;
  }

  public Anime addLicensorsItem(MalUrl licensorsItem) {
    if (this.licensors == null) {
      this.licensors = new ArrayList<>();
    }
    this.licensors.add(licensorsItem);
    return this;
  }

   /**
   * Get licensors
   * @return licensors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getLicensors() {
    return licensors;
  }


  public void setLicensors(List<MalUrl> licensors) {
    this.licensors = licensors;
  }


  public Anime studios(List<MalUrl> studios) {
    
    this.studios = studios;
    return this;
  }

  public Anime addStudiosItem(MalUrl studiosItem) {
    if (this.studios == null) {
      this.studios = new ArrayList<>();
    }
    this.studios.add(studiosItem);
    return this;
  }

   /**
   * Get studios
   * @return studios
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getStudios() {
    return studios;
  }


  public void setStudios(List<MalUrl> studios) {
    this.studios = studios;
  }


  public Anime genres(List<MalUrl> genres) {
    
    this.genres = genres;
    return this;
  }

  public Anime addGenresItem(MalUrl genresItem) {
    if (this.genres == null) {
      this.genres = new ArrayList<>();
    }
    this.genres.add(genresItem);
    return this;
  }

   /**
   * Get genres
   * @return genres
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getGenres() {
    return genres;
  }


  public void setGenres(List<MalUrl> genres) {
    this.genres = genres;
  }


  public Anime explicitGenres(List<MalUrl> explicitGenres) {
    
    this.explicitGenres = explicitGenres;
    return this;
  }

  public Anime addExplicitGenresItem(MalUrl explicitGenresItem) {
    if (this.explicitGenres == null) {
      this.explicitGenres = new ArrayList<>();
    }
    this.explicitGenres.add(explicitGenresItem);
    return this;
  }

   /**
   * Get explicitGenres
   * @return explicitGenres
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getExplicitGenres() {
    return explicitGenres;
  }


  public void setExplicitGenres(List<MalUrl> explicitGenres) {
    this.explicitGenres = explicitGenres;
  }


  public Anime themes(List<MalUrl> themes) {
    
    this.themes = themes;
    return this;
  }

  public Anime addThemesItem(MalUrl themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

   /**
   * Get themes
   * @return themes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getThemes() {
    return themes;
  }


  public void setThemes(List<MalUrl> themes) {
    this.themes = themes;
  }


  public Anime demographics(List<MalUrl> demographics) {
    
    this.demographics = demographics;
    return this;
  }

  public Anime addDemographicsItem(MalUrl demographicsItem) {
    if (this.demographics == null) {
      this.demographics = new ArrayList<>();
    }
    this.demographics.add(demographicsItem);
    return this;
  }

   /**
   * Get demographics
   * @return demographics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MalUrl> getDemographics() {
    return demographics;
  }


  public void setDemographics(List<MalUrl> demographics) {
    this.demographics = demographics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Anime anime = (Anime) o;
    return Objects.equals(this.malId, anime.malId) &&
        Objects.equals(this.url, anime.url) &&
        Objects.equals(this.images, anime.images) &&
        Objects.equals(this.trailer, anime.trailer) &&
        Objects.equals(this.approved, anime.approved) &&
        Objects.equals(this.titles, anime.titles) &&
        Objects.equals(this.title, anime.title) &&
        Objects.equals(this.titleEnglish, anime.titleEnglish) &&
        Objects.equals(this.titleJapanese, anime.titleJapanese) &&
        Objects.equals(this.titleSynonyms, anime.titleSynonyms) &&
        Objects.equals(this.type, anime.type) &&
        Objects.equals(this.source, anime.source) &&
        Objects.equals(this.episodes, anime.episodes) &&
        Objects.equals(this.status, anime.status) &&
        Objects.equals(this.airing, anime.airing) &&
        Objects.equals(this.aired, anime.aired) &&
        Objects.equals(this.duration, anime.duration) &&
        Objects.equals(this.rating, anime.rating) &&
        Objects.equals(this.score, anime.score) &&
        Objects.equals(this.scoredBy, anime.scoredBy) &&
        Objects.equals(this.rank, anime.rank) &&
        Objects.equals(this.popularity, anime.popularity) &&
        Objects.equals(this.members, anime.members) &&
        Objects.equals(this.favorites, anime.favorites) &&
        Objects.equals(this.synopsis, anime.synopsis) &&
        Objects.equals(this.background, anime.background) &&
        Objects.equals(this.season, anime.season) &&
        Objects.equals(this.year, anime.year) &&
        Objects.equals(this.broadcast, anime.broadcast) &&
        Objects.equals(this.producers, anime.producers) &&
        Objects.equals(this.licensors, anime.licensors) &&
        Objects.equals(this.studios, anime.studios) &&
        Objects.equals(this.genres, anime.genres) &&
        Objects.equals(this.explicitGenres, anime.explicitGenres) &&
        Objects.equals(this.themes, anime.themes) &&
        Objects.equals(this.demographics, anime.demographics);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(malId, url, images, trailer, approved, titles, title, titleEnglish, titleJapanese, titleSynonyms, type, source, episodes, status, airing, aired, duration, rating, score, scoredBy, rank, popularity, members, favorites, synopsis, background, season, year, broadcast, producers, licensors, studios, genres, explicitGenres, themes, demographics);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Anime {\n");
    sb.append("    malId: ").append(toIndentedString(malId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    trailer: ").append(toIndentedString(trailer)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleEnglish: ").append(toIndentedString(titleEnglish)).append("\n");
    sb.append("    titleJapanese: ").append(toIndentedString(titleJapanese)).append("\n");
    sb.append("    titleSynonyms: ").append(toIndentedString(titleSynonyms)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    airing: ").append(toIndentedString(airing)).append("\n");
    sb.append("    aired: ").append(toIndentedString(aired)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    scoredBy: ").append(toIndentedString(scoredBy)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    broadcast: ").append(toIndentedString(broadcast)).append("\n");
    sb.append("    producers: ").append(toIndentedString(producers)).append("\n");
    sb.append("    licensors: ").append(toIndentedString(licensors)).append("\n");
    sb.append("    studios: ").append(toIndentedString(studios)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    explicitGenres: ").append(toIndentedString(explicitGenres)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mal_id");
    openapiFields.add("url");
    openapiFields.add("images");
    openapiFields.add("trailer");
    openapiFields.add("approved");
    openapiFields.add("titles");
    openapiFields.add("title");
    openapiFields.add("title_english");
    openapiFields.add("title_japanese");
    openapiFields.add("title_synonyms");
    openapiFields.add("type");
    openapiFields.add("source");
    openapiFields.add("episodes");
    openapiFields.add("status");
    openapiFields.add("airing");
    openapiFields.add("aired");
    openapiFields.add("duration");
    openapiFields.add("rating");
    openapiFields.add("score");
    openapiFields.add("scored_by");
    openapiFields.add("rank");
    openapiFields.add("popularity");
    openapiFields.add("members");
    openapiFields.add("favorites");
    openapiFields.add("synopsis");
    openapiFields.add("background");
    openapiFields.add("season");
    openapiFields.add("year");
    openapiFields.add("broadcast");
    openapiFields.add("producers");
    openapiFields.add("licensors");
    openapiFields.add("studios");
    openapiFields.add("genres");
    openapiFields.add("explicit_genres");
    openapiFields.add("themes");
    openapiFields.add("demographics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Anime
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Anime.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Anime is not found in the empty JSON string", Anime.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Anime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Anime` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        AnimeImages.validateJsonObject(jsonObj.getAsJsonObject("images"));
      }
      // validate the optional field `trailer`
      if (jsonObj.get("trailer") != null && !jsonObj.get("trailer").isJsonNull()) {
        TrailerBase.validateJsonObject(jsonObj.getAsJsonObject("trailer"));
      }
      if (jsonObj.get("titles") != null && !jsonObj.get("titles").isJsonNull()) {
        JsonArray jsonArraytitles = jsonObj.getAsJsonArray("titles");
        if (jsonArraytitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("titles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `titles` to be an array in the JSON string but got `%s`", jsonObj.get("titles").toString()));
          }

          // validate the optional field `titles` (array)
          for (int i = 0; i < jsonArraytitles.size(); i++) {
            Title.validateJsonObject(jsonArraytitles.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("title_english") != null && !jsonObj.get("title_english").isJsonNull()) && !jsonObj.get("title_english").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_english` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_english").toString()));
      }
      if ((jsonObj.get("title_japanese") != null && !jsonObj.get("title_japanese").isJsonNull()) && !jsonObj.get("title_japanese").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_japanese` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_japanese").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("title_synonyms") != null && !jsonObj.get("title_synonyms").isJsonNull()) && !jsonObj.get("title_synonyms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("title_synonyms").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `aired`
      if (jsonObj.get("aired") != null && !jsonObj.get("aired").isJsonNull()) {
        Daterange.validateJsonObject(jsonObj.getAsJsonObject("aired"));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) && !jsonObj.get("rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating").toString()));
      }
      if ((jsonObj.get("synopsis") != null && !jsonObj.get("synopsis").isJsonNull()) && !jsonObj.get("synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synopsis").toString()));
      }
      if ((jsonObj.get("background") != null && !jsonObj.get("background").isJsonNull()) && !jsonObj.get("background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background").toString()));
      }
      if ((jsonObj.get("season") != null && !jsonObj.get("season").isJsonNull()) && !jsonObj.get("season").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `season` to be a primitive type in the JSON string but got `%s`", jsonObj.get("season").toString()));
      }
      // validate the optional field `broadcast`
      if (jsonObj.get("broadcast") != null && !jsonObj.get("broadcast").isJsonNull()) {
        Broadcast.validateJsonObject(jsonObj.getAsJsonObject("broadcast"));
      }
      if (jsonObj.get("producers") != null && !jsonObj.get("producers").isJsonNull()) {
        JsonArray jsonArrayproducers = jsonObj.getAsJsonArray("producers");
        if (jsonArrayproducers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("producers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `producers` to be an array in the JSON string but got `%s`", jsonObj.get("producers").toString()));
          }

          // validate the optional field `producers` (array)
          for (int i = 0; i < jsonArrayproducers.size(); i++) {
            MalUrl.validateJsonObject(jsonArrayproducers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("licensors") != null && !jsonObj.get("licensors").isJsonNull()) {
        JsonArray jsonArraylicensors = jsonObj.getAsJsonArray("licensors");
        if (jsonArraylicensors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("licensors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `licensors` to be an array in the JSON string but got `%s`", jsonObj.get("licensors").toString()));
          }

          // validate the optional field `licensors` (array)
          for (int i = 0; i < jsonArraylicensors.size(); i++) {
            MalUrl.validateJsonObject(jsonArraylicensors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("studios") != null && !jsonObj.get("studios").isJsonNull()) {
        JsonArray jsonArraystudios = jsonObj.getAsJsonArray("studios");
        if (jsonArraystudios != null) {
          // ensure the json data is an array
          if (!jsonObj.get("studios").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `studios` to be an array in the JSON string but got `%s`", jsonObj.get("studios").toString()));
          }

          // validate the optional field `studios` (array)
          for (int i = 0; i < jsonArraystudios.size(); i++) {
            MalUrl.validateJsonObject(jsonArraystudios.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("genres") != null && !jsonObj.get("genres").isJsonNull()) {
        JsonArray jsonArraygenres = jsonObj.getAsJsonArray("genres");
        if (jsonArraygenres != null) {
          // ensure the json data is an array
          if (!jsonObj.get("genres").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `genres` to be an array in the JSON string but got `%s`", jsonObj.get("genres").toString()));
          }

          // validate the optional field `genres` (array)
          for (int i = 0; i < jsonArraygenres.size(); i++) {
            MalUrl.validateJsonObject(jsonArraygenres.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("explicit_genres") != null && !jsonObj.get("explicit_genres").isJsonNull()) {
        JsonArray jsonArrayexplicitGenres = jsonObj.getAsJsonArray("explicit_genres");
        if (jsonArrayexplicitGenres != null) {
          // ensure the json data is an array
          if (!jsonObj.get("explicit_genres").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `explicit_genres` to be an array in the JSON string but got `%s`", jsonObj.get("explicit_genres").toString()));
          }

          // validate the optional field `explicit_genres` (array)
          for (int i = 0; i < jsonArrayexplicitGenres.size(); i++) {
            MalUrl.validateJsonObject(jsonArrayexplicitGenres.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("themes") != null && !jsonObj.get("themes").isJsonNull()) {
        JsonArray jsonArraythemes = jsonObj.getAsJsonArray("themes");
        if (jsonArraythemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("themes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
          }

          // validate the optional field `themes` (array)
          for (int i = 0; i < jsonArraythemes.size(); i++) {
            MalUrl.validateJsonObject(jsonArraythemes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("demographics") != null && !jsonObj.get("demographics").isJsonNull()) {
        JsonArray jsonArraydemographics = jsonObj.getAsJsonArray("demographics");
        if (jsonArraydemographics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("demographics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `demographics` to be an array in the JSON string but got `%s`", jsonObj.get("demographics").toString()));
          }

          // validate the optional field `demographics` (array)
          for (int i = 0; i < jsonArraydemographics.size(); i++) {
            MalUrl.validateJsonObject(jsonArraydemographics.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Anime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Anime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Anime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Anime.class));

       return (TypeAdapter<T>) new TypeAdapter<Anime>() {
           @Override
           public void write(JsonWriter out, Anime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Anime read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Anime given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Anime
  * @throws IOException if the JSON string is invalid with respect to Anime
  */
  public static Anime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Anime.class);
  }

 /**
  * Convert an instance of Anime to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

