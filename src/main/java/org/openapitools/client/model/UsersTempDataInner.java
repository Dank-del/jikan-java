/*
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API. It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.  # Information  ‚ö° Jikan is powered by it's awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)  ## Rate Limiting  | Duration | Requests | |----|----| | Monthly | **Unlimited** | | Per Minute | 60 requests | | Per Second | 3 requests |   ## JSON Notes - Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`. - Any array or object property whose value does not exist or is undetermined, will be empty. - Any `score` property whose value does not exist or is undetermined, will be `0`. - All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone  ## Caching By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.  All requests, by default are cached for **24 hours** except the following endpoints which have their own unique cache **Time To Live**.   | Request | TTL | | ---- | ---- | | All (Default) | 24 hours |   The following response headers will detail cache information.  | Header | Remarks | | ---- | ---- | | `Expires` | Cache expiry date | | `Last-Modified` | Cache set date | | `X-Request-Fingerprint` | Unique request fingerprint |   Note: Caching headers will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.  They won't be available on pages which perform queries, like /anime, or /top/anime, etc.  ## Allowed HTTP(s) requests  **Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list. Only GET requests are supported which return READ-ONLY data.  ## HTTP Responses  | HTTP Status | Remarks | | ---- | ---- | | `200 - OK` | The request was successful | | `304 - Not Modified` | You have the latest data (Cache Validation response) | | `400 - Bad Request` | You've made an invalid request. Recheck documentation | | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` | | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed | | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) | | `500 - Internal Server Error` | Something is not working on our end. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue | | `503 - Service Unavailable` | The service has broke. |   ## JSON Error Response  ```json  {      \"status\": 404,      \"type\": \"BadResponseException\",      \"message\": \"Resource does not exist\",      \"error\": \"Something Happened\",      \"report_url\": \"https://github.com...\"   } ```  | Property | Remarks | | ---- | ---- | | `status` | Returned HTTP Status Code | | `type` | Thrown Exception | | `message` | Human-readable error message | | `error` | Error response and trace from the API | | `report_url` | Clicking this would redirect you to a generated GitHub issue. ‚Ñπ It's only returned on a parser error. |   ## Cache Validation  - All requests return a `ETag` header which is an MD5 hash of the response - You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header - You will get a HTTP `304 - Not Modified` response if the content has not changed - If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response  ![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')  ## Disclaimer  - Jikan is not affiliated with MyAnimeList.net. - Jikan is a free, open-source API. Please use it responsibly.  ----  By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.  [v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.UsersTempDataInnerAnimeStats;
import org.openapitools.client.model.UsersTempDataInnerFavorites;
import org.openapitools.client.model.UsersTempDataInnerImages;
import org.openapitools.client.model.UsersTempDataInnerMangaStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersTempDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-08T15:18:52.497326700+05:30[Asia/Calcutta]")
public class UsersTempDataInner {
  public static final String SERIALIZED_NAME_MAL_ID = "mal_id";
  @SerializedName(SERIALIZED_NAME_MAL_ID)
  private Integer malId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private UsersTempDataInnerImages images;

  public static final String SERIALIZED_NAME_LAST_ONLINE = "last_online";
  @SerializedName(SERIALIZED_NAME_LAST_ONLINE)
  private String lastOnline;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private String birthday;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_JOINED = "joined";
  @SerializedName(SERIALIZED_NAME_JOINED)
  private String joined;

  public static final String SERIALIZED_NAME_ANIME_STATS = "anime_stats";
  @SerializedName(SERIALIZED_NAME_ANIME_STATS)
  private UsersTempDataInnerAnimeStats animeStats;

  public static final String SERIALIZED_NAME_MANGA_STATS = "manga_stats";
  @SerializedName(SERIALIZED_NAME_MANGA_STATS)
  private UsersTempDataInnerMangaStats mangaStats;

  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private UsersTempDataInnerFavorites favorites;

  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public UsersTempDataInner() {
  }

  public UsersTempDataInner malId(Integer malId) {
    
    this.malId = malId;
    return this;
  }

   /**
   * MyAnimeList ID
   * @return malId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList ID")

  public Integer getMalId() {
    return malId;
  }


  public void setMalId(Integer malId) {
    this.malId = malId;
  }


  public UsersTempDataInner username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * MyAnimeList Username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList Username")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public UsersTempDataInner url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * MyAnimeList URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public UsersTempDataInner images(UsersTempDataInnerImages images) {
    
    this.images = images;
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsersTempDataInnerImages getImages() {
    return images;
  }


  public void setImages(UsersTempDataInnerImages images) {
    this.images = images;
  }


  public UsersTempDataInner lastOnline(String lastOnline) {
    
    this.lastOnline = lastOnline;
    return this;
  }

   /**
   * Last Online Date ISO8601
   * @return lastOnline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last Online Date ISO8601")

  public String getLastOnline() {
    return lastOnline;
  }


  public void setLastOnline(String lastOnline) {
    this.lastOnline = lastOnline;
  }


  public UsersTempDataInner gender(String gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * User Gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User Gender")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    this.gender = gender;
  }


  public UsersTempDataInner birthday(String birthday) {
    
    this.birthday = birthday;
    return this;
  }

   /**
   * Birthday Date ISO8601
   * @return birthday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Birthday Date ISO8601")

  public String getBirthday() {
    return birthday;
  }


  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }


  public UsersTempDataInner location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * Location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    this.location = location;
  }


  public UsersTempDataInner joined(String joined) {
    
    this.joined = joined;
    return this;
  }

   /**
   * Joined Date ISO8601
   * @return joined
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Joined Date ISO8601")

  public String getJoined() {
    return joined;
  }


  public void setJoined(String joined) {
    this.joined = joined;
  }


  public UsersTempDataInner animeStats(UsersTempDataInnerAnimeStats animeStats) {
    
    this.animeStats = animeStats;
    return this;
  }

   /**
   * Get animeStats
   * @return animeStats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsersTempDataInnerAnimeStats getAnimeStats() {
    return animeStats;
  }


  public void setAnimeStats(UsersTempDataInnerAnimeStats animeStats) {
    this.animeStats = animeStats;
  }


  public UsersTempDataInner mangaStats(UsersTempDataInnerMangaStats mangaStats) {
    
    this.mangaStats = mangaStats;
    return this;
  }

   /**
   * Get mangaStats
   * @return mangaStats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsersTempDataInnerMangaStats getMangaStats() {
    return mangaStats;
  }


  public void setMangaStats(UsersTempDataInnerMangaStats mangaStats) {
    this.mangaStats = mangaStats;
  }


  public UsersTempDataInner favorites(UsersTempDataInnerFavorites favorites) {
    
    this.favorites = favorites;
    return this;
  }

   /**
   * Get favorites
   * @return favorites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsersTempDataInnerFavorites getFavorites() {
    return favorites;
  }


  public void setFavorites(UsersTempDataInnerFavorites favorites) {
    this.favorites = favorites;
  }


  public UsersTempDataInner about(String about) {
    
    this.about = about;
    return this;
  }

   /**
   * User About. NOTE: About information is customizable by users through BBCode on MyAnimeList. This means users can add multimedia content, different text sizes, etc. Due to this freeform, Jikan returns parsed HTML. Validate on your end!
   * @return about
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User About. NOTE: About information is customizable by users through BBCode on MyAnimeList. This means users can add multimedia content, different text sizes, etc. Due to this freeform, Jikan returns parsed HTML. Validate on your end!")

  public String getAbout() {
    return about;
  }


  public void setAbout(String about) {
    this.about = about;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersTempDataInner usersTempDataInner = (UsersTempDataInner) o;
    return Objects.equals(this.malId, usersTempDataInner.malId) &&
        Objects.equals(this.username, usersTempDataInner.username) &&
        Objects.equals(this.url, usersTempDataInner.url) &&
        Objects.equals(this.images, usersTempDataInner.images) &&
        Objects.equals(this.lastOnline, usersTempDataInner.lastOnline) &&
        Objects.equals(this.gender, usersTempDataInner.gender) &&
        Objects.equals(this.birthday, usersTempDataInner.birthday) &&
        Objects.equals(this.location, usersTempDataInner.location) &&
        Objects.equals(this.joined, usersTempDataInner.joined) &&
        Objects.equals(this.animeStats, usersTempDataInner.animeStats) &&
        Objects.equals(this.mangaStats, usersTempDataInner.mangaStats) &&
        Objects.equals(this.favorites, usersTempDataInner.favorites) &&
        Objects.equals(this.about, usersTempDataInner.about);
  }

  @Override
  public int hashCode() {
    return Objects.hash(malId, username, url, images, lastOnline, gender, birthday, location, joined, animeStats, mangaStats, favorites, about);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersTempDataInner {\n");
    sb.append("    malId: ").append(toIndentedString(malId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    lastOnline: ").append(toIndentedString(lastOnline)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    joined: ").append(toIndentedString(joined)).append("\n");
    sb.append("    animeStats: ").append(toIndentedString(animeStats)).append("\n");
    sb.append("    mangaStats: ").append(toIndentedString(mangaStats)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mal_id");
    openapiFields.add("username");
    openapiFields.add("url");
    openapiFields.add("images");
    openapiFields.add("last_online");
    openapiFields.add("gender");
    openapiFields.add("birthday");
    openapiFields.add("location");
    openapiFields.add("joined");
    openapiFields.add("anime_stats");
    openapiFields.add("manga_stats");
    openapiFields.add("favorites");
    openapiFields.add("about");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersTempDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UsersTempDataInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersTempDataInner is not found in the empty JSON string", UsersTempDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UsersTempDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersTempDataInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        UsersTempDataInnerImages.validateJsonObject(jsonObj.getAsJsonObject("images"));
      }
      if ((jsonObj.get("last_online") != null && !jsonObj.get("last_online").isJsonNull()) && !jsonObj.get("last_online").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_online` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_online").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("joined") != null && !jsonObj.get("joined").isJsonNull()) && !jsonObj.get("joined").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joined` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joined").toString()));
      }
      // validate the optional field `anime_stats`
      if (jsonObj.get("anime_stats") != null && !jsonObj.get("anime_stats").isJsonNull()) {
        UsersTempDataInnerAnimeStats.validateJsonObject(jsonObj.getAsJsonObject("anime_stats"));
      }
      // validate the optional field `manga_stats`
      if (jsonObj.get("manga_stats") != null && !jsonObj.get("manga_stats").isJsonNull()) {
        UsersTempDataInnerMangaStats.validateJsonObject(jsonObj.getAsJsonObject("manga_stats"));
      }
      // validate the optional field `favorites`
      if (jsonObj.get("favorites") != null && !jsonObj.get("favorites").isJsonNull()) {
        UsersTempDataInnerFavorites.validateJsonObject(jsonObj.getAsJsonObject("favorites"));
      }
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersTempDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersTempDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersTempDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersTempDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersTempDataInner>() {
           @Override
           public void write(JsonWriter out, UsersTempDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersTempDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersTempDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersTempDataInner
  * @throws IOException if the JSON string is invalid with respect to UsersTempDataInner
  */
  public static UsersTempDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersTempDataInner.class);
  }

 /**
  * Convert an instance of UsersTempDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

