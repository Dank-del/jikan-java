/*
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API. It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.  # Information  ‚ö° Jikan is powered by it's awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)  ## Rate Limiting  | Duration | Requests | |----|----| | Monthly | **Unlimited** | | Per Minute | 60 requests | | Per Second | 3 requests |   ## JSON Notes - Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`. - Any array or object property whose value does not exist or is undetermined, will be empty. - Any `score` property whose value does not exist or is undetermined, will be `0`. - All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone  ## Caching By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.  All requests, by default are cached for **24 hours** except the following endpoints which have their own unique cache **Time To Live**.   | Request | TTL | | ---- | ---- | | All (Default) | 24 hours |   The following response headers will detail cache information.  | Header | Remarks | | ---- | ---- | | `Expires` | Cache expiry date | | `Last-Modified` | Cache set date | | `X-Request-Fingerprint` | Unique request fingerprint |   Note: Caching headers will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.  They won't be available on pages which perform queries, like /anime, or /top/anime, etc.  ## Allowed HTTP(s) requests  **Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list. Only GET requests are supported which return READ-ONLY data.  ## HTTP Responses  | HTTP Status | Remarks | | ---- | ---- | | `200 - OK` | The request was successful | | `304 - Not Modified` | You have the latest data (Cache Validation response) | | `400 - Bad Request` | You've made an invalid request. Recheck documentation | | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` | | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed | | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) | | `500 - Internal Server Error` | Something is not working on our end. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue | | `503 - Service Unavailable` | The service has broke. |   ## JSON Error Response  ```json  {      \"status\": 404,      \"type\": \"BadResponseException\",      \"message\": \"Resource does not exist\",      \"error\": \"Something Happened\",      \"report_url\": \"https://github.com...\"   } ```  | Property | Remarks | | ---- | ---- | | `status` | Returned HTTP Status Code | | `type` | Thrown Exception | | `message` | Human-readable error message | | `error` | Error response and trace from the API | | `report_url` | Clicking this would redirect you to a generated GitHub issue. ‚Ñπ It's only returned on a parser error. |   ## Cache Validation  - All requests return a `ETag` header which is an MD5 hash of the response - You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header - You will get a HTTP `304 - Not Modified` response if the content has not changed - If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response  ![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')  ## Disclaimer  - Jikan is not affiliated with MyAnimeList.net. - Jikan is a free, open-source API. Please use it responsibly.  ----  By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.  [v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.PeopleImages;
import org.openapitools.client.model.PersonAnimeDataInner;
import org.openapitools.client.model.PersonFullMangaInner;
import org.openapitools.client.model.PersonFullVoicesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Person Resource
 */
@ApiModel(description = "Person Resource")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-08T15:34:51.366952+05:30[Asia/Calcutta]")
public class PersonFull {
  public static final String SERIALIZED_NAME_MAL_ID = "mal_id";
  @SerializedName(SERIALIZED_NAME_MAL_ID)
  private Integer malId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "website_url";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private PeopleImages images;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "given_name";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "family_name";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_ALTERNATE_NAMES = "alternate_names";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_NAMES)
  private List<String> alternateNames = null;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private String birthday;

  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private Integer favorites;

  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_ANIME = "anime";
  @SerializedName(SERIALIZED_NAME_ANIME)
  private List<PersonAnimeDataInner> anime = null;

  public static final String SERIALIZED_NAME_MANGA = "manga";
  @SerializedName(SERIALIZED_NAME_MANGA)
  private List<PersonFullMangaInner> manga = null;

  public static final String SERIALIZED_NAME_VOICES = "voices";
  @SerializedName(SERIALIZED_NAME_VOICES)
  private List<PersonFullVoicesInner> voices = null;

  public PersonFull() {
  }

  public PersonFull malId(Integer malId) {
    
    this.malId = malId;
    return this;
  }

   /**
   * MyAnimeList ID
   * @return malId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList ID")

  public Integer getMalId() {
    return malId;
  }


  public void setMalId(Integer malId) {
    this.malId = malId;
  }


  public PersonFull url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * MyAnimeList URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyAnimeList URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public PersonFull websiteUrl(String websiteUrl) {
    
    this.websiteUrl = websiteUrl;
    return this;
  }

   /**
   * Person&#39;s website URL
   * @return websiteUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Person's website URL")

  public String getWebsiteUrl() {
    return websiteUrl;
  }


  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }


  public PersonFull images(PeopleImages images) {
    
    this.images = images;
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PeopleImages getImages() {
    return images;
  }


  public void setImages(PeopleImages images) {
    this.images = images;
  }


  public PersonFull name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PersonFull givenName(String givenName) {
    
    this.givenName = givenName;
    return this;
  }

   /**
   * Given Name
   * @return givenName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Given Name")

  public String getGivenName() {
    return givenName;
  }


  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public PersonFull familyName(String familyName) {
    
    this.familyName = familyName;
    return this;
  }

   /**
   * Family Name
   * @return familyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Family Name")

  public String getFamilyName() {
    return familyName;
  }


  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public PersonFull alternateNames(List<String> alternateNames) {
    
    this.alternateNames = alternateNames;
    return this;
  }

  public PersonFull addAlternateNamesItem(String alternateNamesItem) {
    if (this.alternateNames == null) {
      this.alternateNames = new ArrayList<>();
    }
    this.alternateNames.add(alternateNamesItem);
    return this;
  }

   /**
   * Other Names
   * @return alternateNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Other Names")

  public List<String> getAlternateNames() {
    return alternateNames;
  }


  public void setAlternateNames(List<String> alternateNames) {
    this.alternateNames = alternateNames;
  }


  public PersonFull birthday(String birthday) {
    
    this.birthday = birthday;
    return this;
  }

   /**
   * Birthday Date ISO8601
   * @return birthday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Birthday Date ISO8601")

  public String getBirthday() {
    return birthday;
  }


  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }


  public PersonFull favorites(Integer favorites) {
    
    this.favorites = favorites;
    return this;
  }

   /**
   * Number of users who have favorited this entry
   * @return favorites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of users who have favorited this entry")

  public Integer getFavorites() {
    return favorites;
  }


  public void setFavorites(Integer favorites) {
    this.favorites = favorites;
  }


  public PersonFull about(String about) {
    
    this.about = about;
    return this;
  }

   /**
   * Biography
   * @return about
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Biography")

  public String getAbout() {
    return about;
  }


  public void setAbout(String about) {
    this.about = about;
  }


  public PersonFull anime(List<PersonAnimeDataInner> anime) {
    
    this.anime = anime;
    return this;
  }

  public PersonFull addAnimeItem(PersonAnimeDataInner animeItem) {
    if (this.anime == null) {
      this.anime = new ArrayList<>();
    }
    this.anime.add(animeItem);
    return this;
  }

   /**
   * Get anime
   * @return anime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PersonAnimeDataInner> getAnime() {
    return anime;
  }


  public void setAnime(List<PersonAnimeDataInner> anime) {
    this.anime = anime;
  }


  public PersonFull manga(List<PersonFullMangaInner> manga) {
    
    this.manga = manga;
    return this;
  }

  public PersonFull addMangaItem(PersonFullMangaInner mangaItem) {
    if (this.manga == null) {
      this.manga = new ArrayList<>();
    }
    this.manga.add(mangaItem);
    return this;
  }

   /**
   * Get manga
   * @return manga
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PersonFullMangaInner> getManga() {
    return manga;
  }


  public void setManga(List<PersonFullMangaInner> manga) {
    this.manga = manga;
  }


  public PersonFull voices(List<PersonFullVoicesInner> voices) {
    
    this.voices = voices;
    return this;
  }

  public PersonFull addVoicesItem(PersonFullVoicesInner voicesItem) {
    if (this.voices == null) {
      this.voices = new ArrayList<>();
    }
    this.voices.add(voicesItem);
    return this;
  }

   /**
   * Get voices
   * @return voices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PersonFullVoicesInner> getVoices() {
    return voices;
  }


  public void setVoices(List<PersonFullVoicesInner> voices) {
    this.voices = voices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonFull personFull = (PersonFull) o;
    return Objects.equals(this.malId, personFull.malId) &&
        Objects.equals(this.url, personFull.url) &&
        Objects.equals(this.websiteUrl, personFull.websiteUrl) &&
        Objects.equals(this.images, personFull.images) &&
        Objects.equals(this.name, personFull.name) &&
        Objects.equals(this.givenName, personFull.givenName) &&
        Objects.equals(this.familyName, personFull.familyName) &&
        Objects.equals(this.alternateNames, personFull.alternateNames) &&
        Objects.equals(this.birthday, personFull.birthday) &&
        Objects.equals(this.favorites, personFull.favorites) &&
        Objects.equals(this.about, personFull.about) &&
        Objects.equals(this.anime, personFull.anime) &&
        Objects.equals(this.manga, personFull.manga) &&
        Objects.equals(this.voices, personFull.voices);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(malId, url, websiteUrl, images, name, givenName, familyName, alternateNames, birthday, favorites, about, anime, manga, voices);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonFull {\n");
    sb.append("    malId: ").append(toIndentedString(malId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    alternateNames: ").append(toIndentedString(alternateNames)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    anime: ").append(toIndentedString(anime)).append("\n");
    sb.append("    manga: ").append(toIndentedString(manga)).append("\n");
    sb.append("    voices: ").append(toIndentedString(voices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mal_id");
    openapiFields.add("url");
    openapiFields.add("website_url");
    openapiFields.add("images");
    openapiFields.add("name");
    openapiFields.add("given_name");
    openapiFields.add("family_name");
    openapiFields.add("alternate_names");
    openapiFields.add("birthday");
    openapiFields.add("favorites");
    openapiFields.add("about");
    openapiFields.add("anime");
    openapiFields.add("manga");
    openapiFields.add("voices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonFull
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PersonFull.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonFull is not found in the empty JSON string", PersonFull.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PersonFull.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonFull` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("website_url") != null && !jsonObj.get("website_url").isJsonNull()) && !jsonObj.get("website_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website_url").toString()));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        PeopleImages.validateJsonObject(jsonObj.getAsJsonObject("images"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("given_name") != null && !jsonObj.get("given_name").isJsonNull()) && !jsonObj.get("given_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `given_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("given_name").toString()));
      }
      if ((jsonObj.get("family_name") != null && !jsonObj.get("family_name").isJsonNull()) && !jsonObj.get("family_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family_name").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("alternate_names") != null && !jsonObj.get("alternate_names").isJsonNull()) && !jsonObj.get("alternate_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternate_names` to be an array in the JSON string but got `%s`", jsonObj.get("alternate_names").toString()));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if (jsonObj.get("anime") != null && !jsonObj.get("anime").isJsonNull()) {
        JsonArray jsonArrayanime = jsonObj.getAsJsonArray("anime");
        if (jsonArrayanime != null) {
          // ensure the json data is an array
          if (!jsonObj.get("anime").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `anime` to be an array in the JSON string but got `%s`", jsonObj.get("anime").toString()));
          }

          // validate the optional field `anime` (array)
          for (int i = 0; i < jsonArrayanime.size(); i++) {
            PersonAnimeDataInner.validateJsonObject(jsonArrayanime.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("manga") != null && !jsonObj.get("manga").isJsonNull()) {
        JsonArray jsonArraymanga = jsonObj.getAsJsonArray("manga");
        if (jsonArraymanga != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manga").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manga` to be an array in the JSON string but got `%s`", jsonObj.get("manga").toString()));
          }

          // validate the optional field `manga` (array)
          for (int i = 0; i < jsonArraymanga.size(); i++) {
            PersonFullMangaInner.validateJsonObject(jsonArraymanga.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("voices") != null && !jsonObj.get("voices").isJsonNull()) {
        JsonArray jsonArrayvoices = jsonObj.getAsJsonArray("voices");
        if (jsonArrayvoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("voices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `voices` to be an array in the JSON string but got `%s`", jsonObj.get("voices").toString()));
          }

          // validate the optional field `voices` (array)
          for (int i = 0; i < jsonArrayvoices.size(); i++) {
            PersonFullVoicesInner.validateJsonObject(jsonArrayvoices.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonFull.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonFull' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonFull> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonFull.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonFull>() {
           @Override
           public void write(JsonWriter out, PersonFull value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonFull read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonFull given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonFull
  * @throws IOException if the JSON string is invalid with respect to PersonFull
  */
  public static PersonFull fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonFull.class);
  }

 /**
  * Convert an instance of PersonFull to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

