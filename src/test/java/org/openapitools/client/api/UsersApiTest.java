/*
 * Jikan API
 * [Jikan](https://jikan.moe) is an **Unofficial** MyAnimeList API. It scrapes the website to satisfy the need for a complete API - which MyAnimeList lacks.  # Information  ‚ö° Jikan is powered by it's awesome backers - üôè [Become a backer](https://www.patreon.com/jikan)  ## Rate Limiting  | Duration | Requests | |----|----| | Monthly | **Unlimited** | | Per Minute | 60 requests | | Per Second | 3 requests |   ## JSON Notes - Any property (except arrays or objects) whose value does not exist or is undetermined, will be `null`. - Any array or object property whose value does not exist or is undetermined, will be empty. - Any `score` property whose value does not exist or is undetermined, will be `0`. - All dates and timestamps are returned in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format and in UTC timezone  ## Caching By **CACHING**, we refer to the data parsed from MyAnimeList which is stored temporarily on our servers to provide better API performance.  All requests, by default are cached for **24 hours** except the following endpoints which have their own unique cache **Time To Live**.   | Request | TTL | | ---- | ---- | | All (Default) | 24 hours |   The following response headers will detail cache information.  | Header | Remarks | | ---- | ---- | | `Expires` | Cache expiry date | | `Last-Modified` | Cache set date | | `X-Request-Fingerprint` | Unique request fingerprint |   Note: Caching headers will only be available on single resource requests and their child endpoints. e.g `/anime/1`, `/anime/1/relations`.  They won't be available on pages which perform queries, like /anime, or /top/anime, etc.  ## Allowed HTTP(s) requests  **Jikan REST API does not provide authenticated requests for MyAnimeList.** This means you can not use it to update your anime/manga list. Only GET requests are supported which return READ-ONLY data.  ## HTTP Responses  | HTTP Status | Remarks | | ---- | ---- | | `200 - OK` | The request was successful | | `304 - Not Modified` | You have the latest data (Cache Validation response) | | `400 - Bad Request` | You've made an invalid request. Recheck documentation | | `404 - Not Found` | The resource was not found or MyAnimeList responded with a `404` | | `405 - Method Not Allowed` | Requested Method is not supported for resource. Only `GET` requests are allowed | | `429 - Too Many Request` | You are being rate limited by Jikan or MyAnimeList is rate-limiting our servers (specified in the error response) | | `500 - Internal Server Error` | Something is not working on our end. If you see an error response with a `report_url` URL, please click on it to open an auto-generated GitHub issue | | `503 - Service Unavailable` | The service has broke. |   ## JSON Error Response  ```json  {      \"status\": 404,      \"type\": \"BadResponseException\",      \"message\": \"Resource does not exist\",      \"error\": \"Something Happened\",      \"report_url\": \"https://github.com...\"   } ```  | Property | Remarks | | ---- | ---- | | `status` | Returned HTTP Status Code | | `type` | Thrown Exception | | `message` | Human-readable error message | | `error` | Error response and trace from the API | | `report_url` | Clicking this would redirect you to a generated GitHub issue. ‚Ñπ It's only returned on a parser error. |   ## Cache Validation  - All requests return a `ETag` header which is an MD5 hash of the response - You can use this hash to verify if there's new or updated content by suppliying it as the value for the `If-None-Match` in your next request header - You will get a HTTP `304 - Not Modified` response if the content has not changed - If the content has changed, you'll get a HTTP `200 - OK` response with the updated JSON response  ![Cache Validation](https://i.imgur.com/925ozVn.png 'Cache Validation')  ## Disclaimer  - Jikan is not affiliated with MyAnimeList.net. - Jikan is a free, open-source API. Please use it responsibly.  ----  By using the API, you are agreeing to Jikan's [terms of use](https://jikan.moe/terms) policy.  [v3 Documentation](https://jikan.docs.apiary.io/) - [Wrappers/SDKs](https://github.com/jikan-me/jikan#wrappers) - [Report an issue](https://github.com/jikan-me/jikan-rest/issues/new) - [Host your own server](https://github.com/jikan-me/jikan-rest)
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExternalLinks;
import org.openapitools.client.model.GetRandomUsers200Response;
import org.openapitools.client.model.GetTopReviews200Response;
import org.openapitools.client.model.GetUserById200Response;
import org.openapitools.client.model.GetUserFavorites200Response;
import org.openapitools.client.model.GetUserFullProfile200Response;
import org.openapitools.client.model.Recommendations;
import org.openapitools.client.model.UserAbout;
import org.openapitools.client.model.UserClubs;
import org.openapitools.client.model.UserFriends;
import org.openapitools.client.model.UserHistory;
import org.openapitools.client.model.UserStatistics;
import org.openapitools.client.model.UserUpdates;
import org.openapitools.client.model.UsersSearch;
import org.openapitools.client.model.UsersSearchQueryGender;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAboutTest() throws ApiException {
        String username = null;
        UserAbout response = api.getUserAbout(username);
        // TODO: test validations
    }

    /**
     * User Anime lists have been discontinued since May 1st, 2022. &lt;a href&#x3D;&#39;https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A&#39;&gt;Read more&lt;/a&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAnimelistTest() throws ApiException {
        String username = null;
        Object response = api.getUserAnimelist(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        Integer id = null;
        GetUserById200Response response = api.getUserById(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserClubsTest() throws ApiException {
        String username = null;
        Integer page = null;
        UserClubs response = api.getUserClubs(username, page);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserExternalTest() throws ApiException {
        String username = null;
        ExternalLinks response = api.getUserExternal(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserFavoritesTest() throws ApiException {
        String username = null;
        GetUserFavorites200Response response = api.getUserFavorites(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserFriendsTest() throws ApiException {
        String username = null;
        Integer page = null;
        UserFriends response = api.getUserFriends(username, page);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserFullProfileTest() throws ApiException {
        String username = null;
        GetUserFullProfile200Response response = api.getUserFullProfile(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserHistoryTest() throws ApiException {
        String username = null;
        String type = null;
        UserHistory response = api.getUserHistory(username, type);
        // TODO: test validations
    }

    /**
     * User Manga lists have been discontinued since May 1st, 2022. &lt;a href&#x3D;&#39;https://docs.google.com/document/d/1-6H-agSnqa8Mfmw802UYfGQrceIEnAaEh4uCXAPiX5A&#39;&gt;Read more&lt;/a&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserMangaListTest() throws ApiException {
        String username = null;
        Object response = api.getUserMangaList(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserProfileTest() throws ApiException {
        String username = null;
        GetRandomUsers200Response response = api.getUserProfile(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRecommendationsTest() throws ApiException {
        String username = null;
        Integer page = null;
        Recommendations response = api.getUserRecommendations(username, page);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserReviewsTest() throws ApiException {
        String username = null;
        Integer page = null;
        GetTopReviews200Response response = api.getUserReviews(username, page);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserStatisticsTest() throws ApiException {
        String username = null;
        UserStatistics response = api.getUserStatistics(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserUpdatesTest() throws ApiException {
        String username = null;
        UserUpdates response = api.getUserUpdates(username);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersSearchTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String q = null;
        UsersSearchQueryGender gender = null;
        String location = null;
        Integer maxAge = null;
        Integer minAge = null;
        UsersSearch response = api.getUsersSearch(page, limit, q, gender, location, maxAge, minAge);
        // TODO: test validations
    }

}
